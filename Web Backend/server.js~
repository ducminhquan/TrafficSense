// __Dependencies__
var express = require('express');
var mongoose = require('mongoose');
var baucis = require('baucis');
var swagger = require('baucis-swagger');
var cors = require('cors');

// Connect to the Mongo instance
mongoose.connect('mongodb://maiantiem:hackathon@ds059509.mongolab.com:59509/hackathon');

// Create a Mongoose schema
var EventSchema = new mongoose.Schema({
  description: Array,
  category: String,
  location: Object,
  extra: Object,
  created_at: {
    type: Date,
    default: new Date()
  },
  author: String
});

// Note that Mongoose middleware will be executed as usual
EventSchema.pre('save', function (next) {
  console.log('An event was saved to DB: %s.', this.get('description'));
  next();
});

// Register the schema
var Events = mongoose.model('event', EventSchema);

// Create the API routes
var controller = baucis.rest('event');

var allowCrossDomain = function (req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type');

    next();
};

// Create the app and listen for API requests
var app = express();
var bapp = baucis();
bapp.use(cors());
// bapp.use('api', allowCrossDomain);
// app.use('api', allowCrossDomain);
app.use('/api', bapp);
app.use(cors());

app.get('/hello', function(req, res){
  res.send('Hello World');
});

app.listen(3000, '0.0.0.0');

console.log('Server listening on port 3000.');

var server = require('http').Server(app);
var io = require('socket.io')(server);

server.listen(4000);

io.on('connection', function (socket) {
  Events.find({ created_at: { $gte: new Date(Date.now() - 3 * 3600000) } }).tailable().stream().on('data', function(event) {
    socket.emit('event', event);
  });
});
